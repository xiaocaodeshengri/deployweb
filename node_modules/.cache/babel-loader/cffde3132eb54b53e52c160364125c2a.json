{"remainingRequest":"D:\\workFiles\\deployweb\\node_modules\\babel-loader\\lib\\index.js!D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workFiles\\deployweb\\src\\components\\qr\\QuestionEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workFiles\\deployweb\\src\\components\\qr\\QuestionEdit.vue","mtime":1583747397542},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\workFiles\\\\deployweb\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '@ckeditor/ckeditor5-build-decoupled-document/build/translations/zh-cn';\nimport DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document'; // import func from '../../../vue-temp/vue-editor-bridge';\n\nexport default {\n  props: ['categorys'],\n  inject: ['reload'],\n  data: function data() {\n    return {\n      editor: DecoupledEditor,\n      editorConfig: {\n        language: 'zh-cn',\n        fontSize: {\n          options: [8, 10, 'default', 14, 16, 18, 20, 22, 24, 26, 28, 32, 48]\n        },\n        fontFamily: {\n          options: ['宋体', '仿宋', '微软雅黑', '黑体', '仿宋_GB2312', '楷体', '隶书', '幼圆']\n        }\n      },\n      users: [],\n      questionEditFlag: false,\n      questionEditId: '',\n      subHeader: '',\n      loading: false,\n      p_classes: [{\n        key: 'P1',\n        value: 'P1'\n      }, {\n        key: 'P2',\n        value: 'P2'\n      }, {\n        key: 'P3',\n        value: 'P3'\n      }, {\n        key: 'P4',\n        value: 'P4'\n      }],\n      record_types: [{\n        key: '故障',\n        value: '故障'\n      }, {\n        key: '环境问题',\n        value: '环境问题'\n      }, {\n        key: '脚本问题',\n        value: '脚本问题'\n      }, {\n        key: '版本问题',\n        value: '版本问题'\n      }, {\n        key: '测试数据有误',\n        value: '测试数据有误'\n      }, {\n        key: '其它',\n        value: '其它'\n      }],\n      questionForm: {\n        title: '',\n        category_id: '',\n        questioner: '',\n        p_class: '',\n        resolver: '',\n        body: '',\n        record_type: ''\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入计划标题',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 60,\n          message: '长度在 3 到 60 个字符',\n          trigger: 'blur'\n        }],\n        category_id: [{\n          required: true,\n          message: '请选择所属项目',\n          trigger: 'change'\n        }],\n        p_class: [{\n          required: true,\n          message: '请选择问题级别',\n          trigger: 'blur'\n        }],\n        resolver: [{\n          required: true,\n          message: '请输入问题指派人',\n          trigger: 'blur'\n        }],\n        body: [{\n          required: true,\n          message: '请填写问题详细内容',\n          trigger: 'blur'\n        }],\n        record_type: [{\n          required: true,\n          message: '请选择问题类型',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.judgeCreateOrEdit();\n    this.getAllUsers();\n  },\n  methods: {\n    initQuestionFormEdit: function initQuestionFormEdit(id) {\n      var _this = this;\n\n      this.$axios.get(this.$api.questionManage + '/' + id).then(function (response) {\n        _this.questionForm.title = response.data['res']['title'];\n        _this.questionForm.category_id = response.data['res']['category_id'];\n        _this.questionForm.p_class = response.data['res']['p_class'];\n        _this.questionForm.questioner = response.data['res']['questioner'];\n        _this.questionForm.resolver = response.data['res']['resolver'];\n        _this.questionForm.body = response.data['res']['body'];\n        _this.questionForm.record_type = response.data['res']['record_type'];\n      });\n    },\n    judgeCreateOrEdit: function judgeCreateOrEdit() {\n      if (this.$route.path.indexOf('edit') >= 0) {\n        this.questionEditFlag = true;\n        this.subHeader = '编辑问题';\n        this.questionEditId = this.$route.params.id;\n        this.initQuestionFormEdit(this.questionEditId);\n      } else {\n        this.questionEditFlag = false;\n        this.subHeader = '新建问题';\n        this.questionForm.questioner = localStorage.getItem(\"name\");\n      }\n    },\n    goBack: function goBack() {\n      this.$router.go(-1);\n    },\n    editorOnReady: function editorOnReady(editor) {\n      editor.ui.getEditableElement().parentElement.insertBefore(editor.ui.view.toolbar.element, editor.ui.getEditableElement());\n\n      editor.plugins.get('FileRepository').createUploadAdapter = function (loader) {\n        var val = editor.getData();\n        return {\n          upload: function () {\n            var _upload = _asyncToGenerator(\n            /*#__PURE__*/\n            regeneratorRuntime.mark(function _callee() {\n              return regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return loader.file.then(function (f) {\n                        var F = new FileReader();\n                        F.readAsArrayBuffer(f);\n                        return new Promise(function (resolve) {\n                          F.onload = function () {\n                            resolve(F.result);\n                          };\n                        });\n                      }).then(function (bufAsArray) {\n                        return {\n                          default: ''\n                        };\n                      });\n\n                    case 2:\n                      return _context.abrupt(\"return\", _context.sent);\n\n                    case 3:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function upload() {\n              return _upload.apply(this, arguments);\n            }\n\n            return upload;\n          }()\n        };\n      };\n    },\n    submitForm: function submitForm(formName) {\n      var _this2 = this;\n\n      this.loading = true;\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          var data = {\n            \"title\": _this2.questionForm.title,\n            \"category_id\": _this2.questionForm.category_id,\n            \"p_class\": _this2.questionForm.p_class,\n            \"questioner\": _this2.questionForm.questioner,\n            \"resolver\": _this2.questionForm.resolver,\n            \"body\": _this2.questionForm.body,\n            \"record_type\": _this2.questionForm.record_type\n          };\n\n          if (_this2.questionEditFlag === false) {\n            _this2.$axios.post(_this2.$api.questionManage, data).then(function (response) {\n              if (_this2.messageShow(_this2, response)) {\n                _this2.loading = false;\n\n                _this2.$router.push('/q_r/questions');\n\n                _this2.reload();\n              }\n            }).catch(function (error) {\n              _this2.errorMessageShow(_this2, error.response);\n            });\n          } else {\n            _this2.$axios.put(_this2.$api.questionManage + '/' + _this2.questionEditId, data).then(function (response) {\n              if (_this2.messageShow(_this2, response)) {\n                _this2.loading = false;\n\n                _this2.$router.push('/q_r/questions');\n\n                _this2.reload();\n              }\n            }).catch(function (error) {\n              _this2.errorMessageShow(_this2, error.response);\n            });\n          }\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    resetForm: function resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    querySearch: function querySearch(queryString, cb) {\n      var users = this.users;\n      var results = queryString ? users.filter(this.createFilter(queryString)) : users;\n      cb(results);\n    },\n    createFilter: function createFilter(queryString) {\n      return function (user) {\n        return user.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    getAllUsers: function getAllUsers() {\n      var _this3 = this;\n\n      this.$axios.get(this.$api.userList, {\n        params: {\n          page: 1,\n          size: 100\n        }\n      }).then(function (response) {\n        _this3.users = response.data['res'];\n      });\n    }\n  }\n};",{"version":3,"sources":["QuestionEdit.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n<div>\r\n    <el-page-header @back=\"goBack\" v-bind:content=\"subHeader\"></el-page-header>\r\n    <el-divider></el-divider>\r\n    <el-form :model=\"questionForm\" :rules=\"rules\" ref=\"questionForm\" label-width=\"150px\" class=\"demo-questionForm\" label-position=\"top\">\r\n        <el-form-item label=\"问题标题\" prop=\"title\" size=\"small\">\r\n            <el-input v-model=\"questionForm.title\" class=\"commonwidth\"></el-input>\r\n        </el-form-item>\r\n        <el-row :gutter=\"10\">\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"提出者\" prop=\"questioner\" size=\"small\">\r\n                <el-input v-model=\"questionForm.questioner\" :disabled=\"true\"></el-input>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"项目\" prop=\"category_id\" size=\"small\">\r\n                <el-select v-model=\"questionForm.category_id\" placeholder=\"请选择项目\">\r\n                  <el-option\r\n                    v-for=\"item in categorys\"\r\n                    :key=\"item.id\"\r\n                    :label=\"item.name\"\r\n                    :value=\"item.id\">\r\n                  </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"级别\" prop=\"p_class\" size=\"small\">\r\n                <el-select v-model=\"questionForm.p_class\" placeholder=\"请选择问题级别\">\r\n                  <el-option\r\n                    v-for=\"item in p_classes\"\r\n                    :key=\"item.key\"\r\n                    :label=\"item.key\"\r\n                    :value=\"item.value\">\r\n                  </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"问题类型\" prop=\"record_type\" size=\"small\">\r\n                <el-select v-model=\"questionForm.record_type\" placeholder=\"请选择问题类型\">\r\n                  <el-option\r\n                    v-for=\"item in record_types\"\r\n                    :key=\"item.key\"\r\n                    :label=\"item.key\"\r\n                    :value=\"item.value\">\r\n                  </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"指派\" prop=\"resolver\" size=\"small\">\r\n                <!-- <el-input v-model=\"questionForm.resolver\"></el-input> -->\r\n                <el-autocomplete\r\n                  class=\"inline-input\"\r\n                  v-model=\"questionForm.resolver\"\r\n                  :fetch-suggestions=\"querySearch\"\r\n                  placeholder=\"请输入指派人员\"\r\n                  :trigger-on-focus=\"true\"\r\n                  >\r\n                </el-autocomplete>\r\n            </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n        <el-form-item label=\"详细内容\" prop=\"body\" size=\"small\">\r\n        <div  class=\"deploytext\">\r\n        <ckeditor :editor=\"editor\" @ready=\"editorOnReady\" v-model=\"questionForm.body\" :config=\"editorConfig\">\r\n        </ckeditor>\r\n        <el-divider></el-divider>\r\n        </div>\r\n        </el-form-item>\r\n        <el-form-item>\r\n            <el-button type=\"primary\" @click=\"submitForm('questionForm')\" :loading=\"loading\">{{ loading ? '提交中 ...' : '确 定' }}</el-button>\r\n            <el-button @click=\"resetForm('questionForm')\">重 置</el-button>\r\n        </el-form-item>\r\n    </el-form>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport '@ckeditor/ckeditor5-build-decoupled-document/build/translations/zh-cn'\r\nimport DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document'\r\n// import func from '../../../vue-temp/vue-editor-bridge';\r\n\r\n  export default {\r\n    props: ['categorys'],\r\n    inject: ['reload'],\r\n    data() {\r\n      return {\r\n        editor: DecoupledEditor,\r\n        editorConfig: {\r\n            language: 'zh-cn',\r\n            fontSize: {\r\n                options: [8, 10, 'default', 14, 16, 18, 20, 22, 24, 26, 28, 32, 48]\r\n            },\r\n            fontFamily:{\r\n                options: ['宋体', '仿宋', '微软雅黑', '黑体', '仿宋_GB2312', '楷体', '隶书', '幼圆']\r\n            }\r\n        },\r\n        users: [],\r\n        questionEditFlag: false,\r\n        questionEditId: '',\r\n        subHeader: '',\r\n        loading: false,\r\n        p_classes: [\r\n          {key: 'P1', value: 'P1'},\r\n          {key: 'P2', value: 'P2'},\r\n          {key: 'P3', value: 'P3'},\r\n          {key: 'P4', value: 'P4'}\r\n        ],\r\n        record_types: [\r\n          {key: '故障', value: '故障'},\r\n          {key: '环境问题', value: '环境问题'},\r\n          {key: '脚本问题', value: '脚本问题'},\r\n          {key: '版本问题', value: '版本问题'},\r\n          {key: '测试数据有误', value: '测试数据有误'},\r\n          {key: '其它', value: '其它'}\r\n        ],\r\n        questionForm: {\r\n          title: '',\r\n          category_id: '',\r\n          questioner: '',\r\n          p_class: '',\r\n          resolver: '',\r\n          body: '',\r\n          record_type: ''\r\n        },\r\n        rules: {\r\n          title: [\r\n            { required: true, message: '请输入计划标题', trigger: 'blur' },\r\n            { min: 3, max: 60, message: '长度在 3 到 60 个字符', trigger: 'blur' }\r\n          ],\r\n          category_id: [\r\n            { required: true, message: '请选择所属项目', trigger: 'change' }\r\n          ],\r\n          p_class: [\r\n            { required: true, message: '请选择问题级别', trigger: 'blur' }\r\n          ],\r\n          resolver: [\r\n            { required: true, message: '请输入问题指派人', trigger: 'blur' }\r\n          ],\r\n          body: [\r\n            { required: true, message: '请填写问题详细内容', trigger: 'blur' }\r\n          ],\r\n          record_type: [\r\n            { required: true, message: '请选择问题类型', trigger: 'blur' }\r\n          ]\r\n        }\r\n      };\r\n    },\r\n    mounted() {\r\n      this.judgeCreateOrEdit();\r\n      this.getAllUsers();\r\n    },\r\n    methods: {\r\n        initQuestionFormEdit(id){\r\n          this.$axios.get((this.$api.questionManage + '/' + id)).then((response) => {\r\n            this.questionForm.title = response.data['res']['title']\r\n            this.questionForm.category_id = response.data['res']['category_id']\r\n            this.questionForm.p_class = response.data['res']['p_class']\r\n            this.questionForm.questioner = response.data['res']['questioner']\r\n            this.questionForm.resolver = response.data['res']['resolver']\r\n            this.questionForm.body = response.data['res']['body']\r\n            this.questionForm.record_type = response.data['res']['record_type']\r\n          })\r\n        },\r\n        judgeCreateOrEdit(){\r\n            if(this.$route.path.indexOf('edit') >= 0){\r\n                this.questionEditFlag = true\r\n                this.subHeader = '编辑问题'\r\n                this.questionEditId = this.$route.params.id\r\n                this.initQuestionFormEdit(this.questionEditId)\r\n            }else{\r\n                this.questionEditFlag = false\r\n                this.subHeader = '新建问题'\r\n                this.questionForm.questioner = localStorage.getItem(\"name\")\r\n            }\r\n        },\r\n        goBack(){\r\n            this.$router.go(-1);\r\n        },\r\n        editorOnReady(editor){\r\n            editor.ui.getEditableElement().parentElement.insertBefore(\r\n                editor.ui.view.toolbar.element,\r\n                editor.ui.getEditableElement()\r\n            );\r\n            editor.plugins.get('FileRepository').createUploadAdapter = function(loader){\r\n                let val = editor.getData();\r\n                return{\r\n                    upload: async function(){\r\n                        return await loader.file.then(f => {\r\n                            const F = new FileReader();\r\n                            F.readAsArrayBuffer(f);\r\n                            return new Promise(resolve => {\r\n                                F.onload = function(){\r\n                                    resolve(F.result)\r\n                                };\r\n                            })\r\n                        }).then(bufAsArray => {\r\n                            return{\r\n                                default: ''\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        },\r\n      submitForm(formName) {\r\n        this.loading = true\r\n        this.$refs[formName].validate((valid) => {\r\n          if (valid) {\r\n            let data = {\r\n              \"title\": this.questionForm.title,\r\n              \"category_id\": this.questionForm.category_id,\r\n              \"p_class\": this.questionForm.p_class,\r\n              \"questioner\": this.questionForm.questioner,\r\n              \"resolver\": this.questionForm.resolver,\r\n              \"body\": this.questionForm.body,\r\n              \"record_type\": this.questionForm.record_type\r\n            }\r\n            if (this.questionEditFlag === false){\r\n              this.$axios.post(this.$api.questionManage, data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.loading = false\r\n                  this.$router.push('/q_r/questions')\r\n                  this.reload();\r\n                }\r\n              }).catch((error) => {\r\n                this.errorMessageShow(this, error.response);\r\n              })\r\n            }else{\r\n              this.$axios.put((this.$api.questionManage + '/' + this.questionEditId), data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.loading = false\r\n                  this.$router.push('/q_r/questions')\r\n                  this.reload();\r\n                }\r\n              }).catch((error) => {\r\n                this.errorMessageShow(this, error.response);\r\n              })\r\n            }\r\n          } else {\r\n            console.log('error submit!!');\r\n            return false;\r\n          }\r\n        });\r\n      },\r\n      resetForm(formName) {\r\n        this.$refs[formName].resetFields();\r\n      },\r\n      querySearch(queryString, cb) {\r\n        var users = this.users;\r\n        var results = queryString ? users.filter(this.createFilter(queryString)) : users;\r\n        cb(results);\r\n      },\r\n      createFilter(queryString) {\r\n        return (user) => {\r\n          return (user.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\r\n        };\r\n      },\r\n      getAllUsers(){\r\n        this.$axios.get(this.$api.userList, \r\n        {\r\n          params: {page: 1, size: 100}\r\n        }).then((response) => {\r\n          this.users = response.data['res']\r\n        })\r\n      }\r\n    }\r\n  }\r\n</script>"],"sourceRoot":"src/components/qr"}]}