{"remainingRequest":"D:\\workFiles\\deployweb\\node_modules\\babel-loader\\lib\\index.js!D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workFiles\\deployweb\\src\\components\\test\\TestTask.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workFiles\\deployweb\\src\\components\\test\\TestTask.vue","mtime":1583747397549},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: ['categorys'],\n  data: function data() {\n    return {\n      currentPage: 1,\n      pageSize: 10,\n      total: 0,\n      editTaskFlag: false,\n      dialogFormVisible: false,\n      taskForm: {\n        id: '',\n        title: '',\n        category_id: '',\n        host: '',\n        username: '',\n        password: '',\n        command: '',\n        report_path: '',\n        email: '',\n        cron: '',\n        remark: ''\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入任务名称',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 60,\n          message: '长度在 1 到 60 个字符',\n          trigger: 'blur'\n        }],\n        category_id: [{\n          required: true,\n          message: '请选择所属项目',\n          trigger: 'change'\n        }],\n        host: [{\n          required: true,\n          message: '请输入执行命令主机的IP',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 16,\n          message: '长度在 1 到 16 个字符',\n          trigger: 'blur'\n        }],\n        username: [{\n          required: true,\n          message: '请输入执行命令主机的后台账户',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入执行命令主机的后台密码',\n          trigger: 'blur'\n        }],\n        command: [{\n          required: true,\n          message: '请输入执行命令',\n          trigger: 'blur'\n        }],\n        report_path: [{\n          required: true,\n          message: '请输入生成报告的绝对路径',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: false,\n          message: '请输入电子邮件',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 254,\n          message: '长度在 1 到 254 个字符',\n          trigger: 'blur'\n        }],\n        cron: [{\n          required: true,\n          message: '请输入CRON定时任务时间',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 30,\n          message: '长度在 1 到 30 个字符',\n          trigger: 'blur'\n        }],\n        remark: [{\n          required: true,\n          message: '请输入测试任务描述信息',\n          trigger: 'blur'\n        }]\n      },\n      tableData: []\n    };\n  },\n  mounted: function mounted() {\n    this.taskList();\n  },\n  methods: {\n    taskList: function taskList() {\n      var _this = this;\n\n      this.$axios.get(this.$api.testTaskList, {\n        params: {\n          page: this.currentPage,\n          size: this.pageSize\n        }\n      }).then(function (response) {\n        if (_this.messageShow(_this, response)) {\n          _this.tableData = response.data['res'];\n          _this.total = response.data['total'];\n        }\n      });\n    },\n    handleSizeChange: function handleSizeChange(val) {\n      this.pageSize = val;\n      this.taskList();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.currentPage = val;\n      this.taskList();\n    },\n    initTaskForm: function initTaskForm() {\n      this.taskForm.id = null, this.taskForm.title = null, this.taskForm.category_id = null, this.taskForm.host = null, this.taskForm.username = null, this.taskForm.password = null, this.taskForm.command = null, this.taskForm.report_path = null, this.taskForm.email = null, this.taskForm.cron = null, this.taskForm.remark = null;\n    },\n    addBtn: function addBtn() {\n      this.initTaskForm();\n      this.editTaskFlag = false;\n      this.dialogFormVisible = true;\n    },\n    editTask: function editTask(id) {\n      var _this2 = this;\n\n      this.editTaskFlag = true;\n      this.$axios.get(this.$api.testTaskManage + '/' + id).then(function (response) {\n        var taskStatus = response.data['res']['status'];\n\n        if (taskStatus === 0) {\n          _this2.taskForm.id = id;\n          _this2.taskForm.title = response.data['res']['title'];\n          _this2.taskForm.category_id = response.data['res']['category_id'];\n          _this2.taskForm.host = response.data['res']['host'];\n          _this2.taskForm.username = response.data['res']['username'];\n          _this2.taskForm.password = response.data['res']['password'];\n          _this2.taskForm.command = response.data['res']['command'];\n          _this2.taskForm.report_path = response.data['res']['report_path'];\n          _this2.taskForm.email = response.data['res']['email'];\n          _this2.taskForm.cron = response.data['res']['cron'];\n          _this2.taskForm.remark = response.data['res']['remark'];\n          _this2.dialogFormVisible = true;\n        } else {\n          _this2.$notify({\n            title: '警告',\n            message: '定时任务正在运行，不允许编辑',\n            type: 'warning'\n          });\n        }\n      });\n    },\n    opTask: function opTask(id, operation) {\n      var _this3 = this;\n\n      this.$axios.get(this.$api.testTaskOperation.replace(/OPERATION/g, operation) + '/' + id).then(function (response) {\n        if (_this3.messageShow(_this3, response)) {\n          _this3.taskList();\n        }\n      }).catch(function (error) {\n        _this3.errorMessageShow(_this3, error.response);\n      });\n    },\n    deleteTask: function deleteTask(id) {\n      var _this4 = this;\n\n      this.$axios.delete(this.$api.testTaskManage + '/' + id).then(function (response) {\n        if (_this4.messageShow(_this4, response)) {\n          _this4.taskList();\n        }\n      }).catch(function (error) {\n        _this4.errorMessageShow(_this4, error.response);\n      });\n    },\n    addTaskBtn: function addTaskBtn() {\n      var _this5 = this;\n\n      var data = {\n        \"title\": this.taskForm.title,\n        \"category_id\": this.taskForm.category_id,\n        \"host\": this.taskForm.host,\n        \"username\": this.taskForm.username,\n        \"password\": this.taskForm.password,\n        \"command\": this.taskForm.command,\n        \"report_path\": this.taskForm.report_path,\n        \"email\": this.taskForm.email,\n        \"cron\": this.taskForm.cron,\n        \"remark\": this.taskForm.remark\n      };\n      this.$axios.post(this.$api.testTaskManage, data).then(function (response) {\n        if (_this5.messageShow(_this5, response)) {\n          _this5.dialogFormVisible = false;\n\n          _this5.taskList();\n        }\n      }).catch(function (error) {\n        _this5.errorMessageShow(_this5, error.response);\n      });\n    },\n    editTaskBtn: function editTaskBtn(id) {\n      var _this6 = this;\n\n      var data = {\n        \"title\": this.taskForm.title,\n        \"category_id\": this.taskForm.category_id,\n        \"host\": this.taskForm.host,\n        \"username\": this.taskForm.username,\n        \"password\": this.taskForm.password,\n        \"command\": this.taskForm.command,\n        \"report_path\": this.taskForm.report_path,\n        \"email\": this.taskForm.email,\n        \"cron\": this.taskForm.cron,\n        \"remark\": this.taskForm.remark\n      };\n      this.$axios.put(this.$api.testTaskManage + '/' + id, data).then(function (response) {\n        if (_this6.messageShow(_this6, response)) {\n          _this6.dialogFormVisible = false;\n          _this6.editTaskFlag = false;\n\n          _this6.taskList();\n        }\n      }).catch(function (error) {\n        _this6.errorMessageShow(_this6, error.response);\n      });\n    },\n    cancelBtn: function cancelBtn() {\n      this.dialogFormVisible = false;\n      this.initTaskForm();\n      this.editTaskFlag = false;\n    }\n  }\n};",{"version":3,"sources":["TestTask.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <el-row :gutter=\"10\">\r\n          <el-col :span=\"3\"><h2>测试定时任务</h2></el-col>\r\n          <el-col :span=\"3\" :offset=\"18\" style=padding-top:18px>\r\n            <el-button @click.native=\"addBtn()\" type=\"primary\" icon=\"el-icon-plus\" size=\"small\" circle plain></el-button>\r\n          </el-col>\r\n        </el-row>\r\n        <el-divider></el-divider>\r\n        <el-table\r\n            :data=\"tableData\"\r\n            stripe\r\n            style=\"width: 100%\">\r\n            <el-table-column\r\n            type=\"index\"\r\n            label=\"No.\"\r\n            width=\"50\">\r\n            </el-table-column>\r\n            <el-table-column\r\n            prop=\"title\"\r\n            label=\"标题\"\r\n            width=\"300\">\r\n                <template slot-scope=\"scope\">\r\n                <a :href=\"'#/test/task/' + scope.row.id + '/detail'\">{{ scope.row.title }}</a>\r\n                </template>\r\n            </el-table-column>\r\n            <el-table-column\r\n            prop=\"category\"\r\n            label=\"项目\">\r\n            </el-table-column>\r\n            <el-table-column\r\n            prop=\"email\"\r\n            label=\"Emails\"\r\n            width=\"200\">\r\n            </el-table-column>\r\n            <el-table-column\r\n            prop=\"cron\"\r\n            label=\"CRON\">\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\" width=\"360\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" plain\r\n                                @click.native=\"editTask(tableData[scope.$index]['id'])\">Edit\r\n                    </el-button>\r\n                    <el-button type=\"info\" size=\"mini\" plain\r\n                                @click.native=\"opTask(tableData[scope.$index]['id'], 'run')\">Run\r\n                    </el-button>\r\n                    <el-button type=\"success\" size=\"mini\" v-if=\"tableData[scope.$index]['status'] === 0\" plain\r\n                                @click.native=\"opTask(tableData[scope.$index]['id'], 'start')\">Start\r\n                    </el-button>\r\n                    <el-button type=\"danger\" size=\"mini\" v-else plain\r\n                                @click.native=\"opTask(tableData[scope.$index]['id'], 'stop')\">Stop\r\n                    </el-button>\r\n                    <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" plain\r\n                                @click.native=\"sureView(deleteTask,tableData[scope.$index]['id'],tableData[scope.$index]['title'])\">\r\n                        Delete\r\n                    </el-button>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n\r\n        <el-row type=\"flex\" justify=\"end\">\r\n          <el-col :span=\"12\" style=padding-top:24px>\r\n            <el-pagination\r\n              @size-change=\"handleSizeChange\"\r\n              @current-change=\"handleCurrentChange\"\r\n              :current-page=\"currentPage\"\r\n              :page-sizes=\"[10, 20, 50, 100]\"\r\n              :page-size=\"pageSize\"\r\n              layout=\"total, sizes, prev, pager, next, jumper\"\r\n              :total=\"total\">\r\n            </el-pagination>\r\n          </el-col>\r\n        </el-row>\r\n\r\n        <el-dialog title=\"定时任务配置\" :visible.sync=\"dialogFormVisible\">\r\n          <el-form :model=\"taskForm\" :rules=\"rules\" ref=\"taskForm\" label-width=\"150px\" class=\"demo-taskForm\">\r\n              <el-form-item label=\"定时任务名称\" prop=\"title\" size=\"small\">\r\n                  <el-input v-model=\"taskForm.title\" class=\"commonwidth\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"项目\" prop=\"category_id\" size=\"small\">\r\n                    <el-select v-model=\"taskForm.category_id\" placeholder=\"请选择项目\">\r\n                    <el-option\r\n                        v-for=\"item in categorys\"\r\n                        :key=\"item.id\"\r\n                        :label=\"item.name\"\r\n                        :value=\"item.id\">\r\n                    </el-option>\r\n                    </el-select>\r\n              </el-form-item>\r\n              <el-form-item label=\"Host\" prop=\"host\" size=\"small\">\r\n                  <el-input v-model=\"taskForm.host\" class=\"small-size\"></el-input>\r\n              </el-form-item>\r\n              <el-row :gutter=\"10\">\r\n                  <el-col :span=\"9\">\r\n                    <el-form-item label=\"Username\" prop=\"username\" size=\"small\">\r\n                        <el-input v-model=\"taskForm.username\" class=\"small-size\"></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n                  <el-col :span=\"9\">\r\n                    <el-form-item label=\"Password\" prop=\"password\" size=\"small\">\r\n                        <el-input v-model=\"taskForm.password\" class=\"small-size\"></el-input>\r\n                    </el-form-item>\r\n                  </el-col>\r\n              </el-row>\r\n              <el-form-item label=\"Command\" prop=\"command\" size=\"small\">\r\n                  <el-input v-model=\"taskForm.command\" class=\"commonwidth\" placeholder=\"cd /root/ && ls -l\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"报告存放绝对路径\" prop=\"report_path\" size=\"small\">\r\n                  <el-input v-model=\"taskForm.report_path\" class=\"commonwidth\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"时间设定\" prop=\"cron\" size=\"small\">\r\n                  <el-input v-model=\"taskForm.cron\" class=\"commonwidth\" placeholder=\"分 时 日 月 星期\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"电子邮件\" prop=\"email\" size=\"small\">\r\n                  <el-input type=\"textarea\" v-model=\"taskForm.email\" class=\"commonwidth\" placeholder=\"邮箱用`,`隔开\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"任务描述\" prop=\"remark\" size=\"small\">\r\n                  <el-input type=\"textarea\" v-model=\"taskForm.remark\" class=\"commonwidth\"></el-input>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click.native=\"cancelBtn()\">取 消</el-button>\r\n              <el-button v-if=\"editTaskFlag === true\" type=\"primary\" @click=\"editTaskBtn(taskForm['id'])\">修 改</el-button>\r\n              <el-button v-else type=\"primary\" @click=\"addTaskBtn()\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    props: ['categorys'],\r\n    data() {\r\n      return {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        total: 0,\r\n        editTaskFlag: false,\r\n        dialogFormVisible: false,\r\n        taskForm: {\r\n          id: '',\r\n          title: '',\r\n          category_id: '',\r\n          host: '',\r\n          username: '',\r\n          password: '',\r\n          command: '',\r\n          report_path: '',\r\n          email: '',\r\n          cron: '',\r\n          remark: ''\r\n        },\r\n        rules: {\r\n          title: [\r\n            { required: true, message: '请输入任务名称', trigger: 'blur' },\r\n            { min: 1, max: 60, message: '长度在 1 到 60 个字符', trigger: 'blur' }\r\n          ],\r\n          category_id: [\r\n            { required: true, message: '请选择所属项目', trigger: 'change' }\r\n          ],\r\n          host: [\r\n            { required: true, message: '请输入执行命令主机的IP', trigger: 'blur' },\r\n            { min: 1, max: 16, message: '长度在 1 到 16 个字符', trigger: 'blur' }\r\n          ],\r\n          username: [\r\n            { required: true, message: '请输入执行命令主机的后台账户', trigger: 'blur' }\r\n          ],\r\n          password: [\r\n            { required: true, message: '请输入执行命令主机的后台密码', trigger: 'blur' }\r\n          ],\r\n          command: [\r\n            { required: true, message: '请输入执行命令', trigger: 'blur' }\r\n          ],\r\n          report_path: [\r\n            { required: true, message: '请输入生成报告的绝对路径', trigger: 'blur' }\r\n          ],\r\n          email: [\r\n            { required: false, message: '请输入电子邮件', trigger: 'blur' },\r\n            { min: 1, max: 254, message: '长度在 1 到 254 个字符', trigger: 'blur' }\r\n          ],\r\n          cron: [\r\n            { required: true, message: '请输入CRON定时任务时间', trigger: 'blur' },\r\n            { min: 1, max: 30, message: '长度在 1 到 30 个字符', trigger: 'blur' }\r\n          ],\r\n          remark: [\r\n            { required: true, message: '请输入测试任务描述信息', trigger: 'blur' }\r\n          ],\r\n        },\r\n        tableData: []\r\n      }\r\n    },\r\n    mounted() {\r\n      this.taskList();\r\n    },\r\n    methods: {\r\n      taskList(){\r\n        this.$axios.get(this.$api.testTaskList, \r\n        {\r\n          params: {page: this.currentPage, size: this.pageSize}\r\n        }).then((response) => {\r\n          if (this.messageShow(this, response)){\r\n            this.tableData = response.data['res']\r\n            this.total = response.data['total']\r\n          }\r\n        })\r\n      },\r\n      handleSizeChange(val){\r\n        this.pageSize = val;\r\n        this.taskList()\r\n      },\r\n      handleCurrentChange(val){\r\n        this.currentPage = val;\r\n        this.taskList()\r\n      },\r\n      initTaskForm(){\r\n        this.taskForm.id = null,\r\n        this.taskForm.title = null,\r\n        this.taskForm.category_id = null,\r\n        this.taskForm.host = null,\r\n        this.taskForm.username = null,\r\n        this.taskForm.password = null,\r\n        this.taskForm.command = null,\r\n        this.taskForm.report_path = null,\r\n        this.taskForm.email = null,\r\n        this.taskForm.cron = null,\r\n        this.taskForm.remark = null\r\n      },\r\n      addBtn(){\r\n        this.initTaskForm()\r\n        this.editTaskFlag = false\r\n        this.dialogFormVisible = true\r\n      },\r\n      editTask(id){\r\n        this.editTaskFlag = true\r\n        this.$axios.get((this.$api.testTaskManage + '/' + id)).then((response) => {\r\n            let taskStatus = response.data['res']['status']\r\n            if (taskStatus === 0){\r\n                this.taskForm.id = id\r\n                this.taskForm.title = response.data['res']['title']\r\n                this.taskForm.category_id = response.data['res']['category_id']\r\n                this.taskForm.host = response.data['res']['host']\r\n                this.taskForm.username = response.data['res']['username']\r\n                this.taskForm.password = response.data['res']['password']\r\n                this.taskForm.command = response.data['res']['command']\r\n                this.taskForm.report_path = response.data['res']['report_path']\r\n                this.taskForm.email = response.data['res']['email']\r\n                this.taskForm.cron = response.data['res']['cron']\r\n                this.taskForm.remark = response.data['res']['remark']\r\n                this.dialogFormVisible = true\r\n            }else{\r\n                this.$notify({\r\n                    title: '警告',\r\n                    message: '定时任务正在运行，不允许编辑',\r\n                    type: 'warning'\r\n                });\r\n            }\r\n        })\r\n      },\r\n      opTask(id, operation){\r\n        this.$axios.get((this.$api.testTaskOperation.replace(/OPERATION/g, operation) + '/' + id)).then((response) => {\r\n          if (this.messageShow(this, response)){\r\n            this.taskList()\r\n          }\r\n        }).catch((error) => {\r\n          this.errorMessageShow(this, error.response);\r\n        })\r\n      },\r\n      deleteTask(id){\r\n        this.$axios.delete((this.$api.testTaskManage + '/' + id)).then((response) => {\r\n          if (this.messageShow(this, response)){\r\n            this.taskList();\r\n          }\r\n        }).catch((error) => {\r\n          this.errorMessageShow(this, error.response);\r\n        })\r\n      },\r\n      addTaskBtn(){\r\n        let data = {\r\n          \"title\": this.taskForm.title,\r\n          \"category_id\": this.taskForm.category_id,\r\n          \"host\": this.taskForm.host,\r\n          \"username\": this.taskForm.username,\r\n          \"password\": this.taskForm.password,\r\n          \"command\": this.taskForm.command,\r\n          \"report_path\": this.taskForm.report_path,\r\n          \"email\": this.taskForm.email,\r\n          \"cron\": this.taskForm.cron,\r\n          \"remark\": this.taskForm.remark\r\n        }\r\n        this.$axios.post(this.$api.testTaskManage, data).then((response) => {\r\n          if (this.messageShow(this, response)){\r\n            this.dialogFormVisible = false;\r\n            this.taskList();\r\n          }\r\n        }).catch((error) => {\r\n          this.errorMessageShow(this, error.response);\r\n        })\r\n      },\r\n      editTaskBtn(id){\r\n        let data = {\r\n          \"title\": this.taskForm.title,\r\n          \"category_id\": this.taskForm.category_id,\r\n          \"host\": this.taskForm.host,\r\n          \"username\": this.taskForm.username,\r\n          \"password\": this.taskForm.password,\r\n          \"command\": this.taskForm.command,\r\n          \"report_path\": this.taskForm.report_path,\r\n          \"email\": this.taskForm.email,\r\n          \"cron\": this.taskForm.cron,\r\n          \"remark\": this.taskForm.remark\r\n        }\r\n        this.$axios.put((this.$api.testTaskManage + '/' + id), data).then((response) => {\r\n          if (this.messageShow(this, response)){\r\n            this.dialogFormVisible = false;\r\n            this.editTaskFlag = false;\r\n            this.taskList();\r\n          }\r\n        }).catch((error) => {\r\n          this.errorMessageShow(this, error.response);\r\n        })\r\n      },\r\n      cancelBtn(){\r\n        this.dialogFormVisible = false;\r\n        this.initTaskForm();\r\n        this.editTaskFlag = false;\r\n      }\r\n    }\r\n  }\r\n</script>"],"sourceRoot":"src/components/test"}]}