{"remainingRequest":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workFiles\\deployweb\\src\\components\\Header.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workFiles\\deployweb\\src\\components\\Header.vue","mtime":1583747397514},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as types from '@/store/types'\nexport default {\n  inject: ['reload'],\n  props: ['categorys'],\n  data() {\n    return {\n      topoFormVisible: false,\n      dialogFormVisible: false,\n      registerFormVisible: false,\n      username: null,\n      activeIndex: '1',\n      links: [],\n      topos: [],\n      passwordForm: {\n        password: '',\n        passwordConfirm: ''\n      },\n      rules: {\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' }\n        ],\n        passwordConfirm: [\n          { required: true, message: '请再次输入密码', trigger: 'blur' }\n        ]\n      },\n      registerForm: {\n        username: '',\n        name: '',\n        password: '',\n        passwordConfirm: '',\n        email: '',\n        category_id: null\n      },\n      registerRules: {\n        username: [\n          { required: true, message: '请输入用户登录名称', trigger: 'blur' }\n        ],\n        name: [\n          { required: true, message: '请输入用户姓名', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' }\n        ],\n        passwordConfirm: [\n          { required: true, message: '请再次输入密码', trigger: 'blur' }\n        ],\n        email: [\n          { required: true, message: '请输入用户电子邮件', trigger: 'blur' }\n        ],\n        category_id: [\n          { required: true, message: '请选择项目组', trigger: 'change' }\n        ]\n      },\n      topoForm: {\n        name: ''\n      },\n      topoRules: {\n        name: [\n          { required: true, message: '请输入环境拓扑图名称', trigger: 'blur' }\n        ]\n      }\n    };\n  },\n  mounted() {\n    this.linkList();\n    this.topoList();\n    this.getUsername()\n  },\n  methods: {\n    handleSelect(key, keyPath) {\n      console.log(key, keyPath);\n    },\n    initPasswordForm(){\n      this.passwordForm.password = null\n      this.passwordForm.passwordConfirm = null\n    },\n    initRegisterForm(){\n      this.registerForm.username = null\n      this.registerForm.name = null\n      this.registerForm.password = null\n      this.registerForm.passwordConfirm = null\n      this.registerForm.email = null\n      this.registerForm.category_id = null\n    },\n    linkList(){\n      this.$axios.get(this.$api.linkList, \n      {\n        params: {page: 1, size: 100, category_id: 17}\n      }).then((response) => {\n          this.links = response.data['res']\n      })\n    },\n    topoList(){\n      this.$axios.get(this.$api.topoList).then((response) => {\n        this.topos = response.data['res']\n      })\n    },\n    getUsername(){\n      this.username = localStorage.getItem(\"username\")\n    },\n    logout(){\n      this.$axios.get(this.$api.logoutApi).then((response) => {\n        if(this.messageShow(this, response)){\n          this.$store.commit(types.LOGOUT);\n          this.$router.push('/');\n          this.reload()\n        }\n      })\n    },\n    changePassword(){\n      this.initPasswordForm()\n      this.dialogFormVisible = true\n    },\n    register(){\n      this.registerFormVisible = true\n    },\n    cancelBtn(){\n      this.initPasswordForm()\n      this.dialogFormVisible = false\n    },\n    changePasswordBtn(){\n      let data = {\n        \"username\": this.username,\n        \"password\": this.passwordForm.password,\n        \"password_confirm\": this.passwordForm.passwordConfirm\n      }\n      this.$axios.put(this.$api.changePassword, data).then((response) => {\n        if (this.messageShow(this, response)){\n          this.dialogFormVisible = false;\n          this.$router.push({path: '/login'});\n        }\n      }).catch((error) => {\n        this.errorMessageShow(this, error.response);\n      })\n    },\n    cancelRegisterBtn(){\n      this.initRegisterForm()\n      this.registerFormVisible = false\n    },\n    registerBtn(){\n      let data = {\n        \"username\": this.registerForm.username,\n        \"name\": this.registerForm.name,\n        \"password\": this.registerForm.password,\n        \"password_confirm\": this.registerForm.passwordConfirm,\n        \"email\": this.registerForm.email,\n        \"category_id\": this.registerForm.category_id\n      }\n      this.$axios.post(this.$api.userManage, data).then(response => {\n        if (this.messageShow(this, response)){\n          this.registerFormVisible = false;\n        }\n      }).catch((error) => {\n        this.errorMessageShow(this, error.response);\n      })\n    },\n    newTopo(){\n      this.topoFormVisible = true\n    },\n    cancelTopoBtn(){\n      this.topoForm.name = null\n      this.topoFormVisible = false\n    },\n    topoBtn(){\n      let data = {\n        \"name\": this.topoForm.name\n      }\n      this.$axios.post(this.$api.topoList, data).then(response => {\n        if (this.messageShow(this, response)){\n          this.topoFormVisible = false;\n          var url = '#/topo/' + response.data['res']['id']\n          window.open(url, '_blank')\n        }\n      }).catch((error) => {\n        this.errorMessageShow(this, error.response);\n      })\n    }\n  }\n}\n",{"version":3,"sources":["Header.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Header.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n      <el-row>\r\n          <el-col :span=\"10\" :offset=\"14\">\r\n          <el-menu :default-active=\"activeIndex\" :router=\"true\" class=\"el-menu-demo\" mode=\"horizontal\">\r\n                  <el-menu-item index=\"/\">首页</el-menu-item>\r\n                  <el-menu-item index=\"/about\">关于</el-menu-item>\r\n                  <el-submenu index=\"1\"><template slot=\"title\">新建</template>\r\n                      <el-menu-item index=\"/management/plans/create\">计划</el-menu-item>\r\n                  </el-submenu>\r\n                  <el-submenu index=\"2\"><template slot=\"title\">环境链接</template>\r\n                      <el-menu-item v-for=\"link in links\" v-bind:key=\"link.linkName\">\r\n                        <a :href=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                      </el-menu-item>\r\n                  </el-submenu>\r\n                  <el-submenu index=\"3\"><template slot=\"title\">环境拓扑</template>\r\n                      <el-menu-item @click.native=\"newTopo()\">新建</el-menu-item>\r\n                      <hr>\r\n                      <el-menu-item v-for=\"topo in topos\" v-bind:key=\"topo.id\">\r\n                        <a :href=\"topo.url\" target=\"_blank\">{{ topo.name }}</a>\r\n                      </el-menu-item>\r\n                  </el-submenu>\r\n                  <el-submenu v-if=\"username != null\" index=\"4\"><template slot=\"title\">{{ username }}</template>\r\n                      <el-menu-item @click.native=\"logout()\">Logout</el-menu-item>\r\n                      <el-menu-item @click.native=\"changePassword()\">修改密码</el-menu-item>\r\n                  </el-submenu>\r\n                  <el-submenu v-else index=\"4\"><template slot=\"title\">Login</template>\r\n                      <el-menu-item index=\"/login\">Login</el-menu-item>\r\n                      <el-menu-item @click.native=\"register()\">Register</el-menu-item>\r\n                  </el-submenu>\r\n          </el-menu>\r\n          </el-col>\r\n      </el-row>\r\n\r\n        <el-dialog title=\"修改密码\" :visible.sync=\"dialogFormVisible\" width=\"30%\">\r\n          <el-form :model=\"passwordForm\" :rules=\"rules\" ref=\"passwordForm\" label-width=\"100px\">\r\n              <el-form-item label=\"密码\" prop=\"password\" size=\"small\">\r\n                  <el-input v-model=\"passwordForm.password\" class=\"password\" type=\"password\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"确认密码\" prop=\"passwordConfirm\" size=\"small\">\r\n                  <el-input v-model=\"passwordForm.passwordConfirm\" class=\"password\" type=\"password\"></el-input>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click=\"cancelBtn()\">取 消</el-button>\r\n              <el-button type=\"primary\" @click=\"changePasswordBtn()\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n\r\n        <el-dialog title=\"用户注册\" :visible.sync=\"registerFormVisible\" width=\"30%\">\r\n          <el-form :model=\"registerForm\" :rules=\"registerRules\" ref=\"registerForm\" label-width=\"100px\">\r\n              <el-form-item label=\"登录名称\" prop=\"username\" size=\"small\">\r\n                  <el-input v-model=\"registerForm.username\" class=\"register\" placeholder=\"请输入登录名称，如：zhangsan\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"用户姓名\" prop=\"name\" size=\"small\">\r\n                  <el-input v-model=\"registerForm.name\" class=\"register\" placeholder=\"请输入显示名称，如：张三\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"密码\" prop=\"password\" size=\"small\">\r\n                  <el-input v-model=\"registerForm.password\" class=\"register\" type=\"password\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"确认密码\" prop=\"passwordConfirm\" size=\"small\">\r\n                  <el-input v-model=\"registerForm.passwordConfirm\" class=\"register\" type=\"password\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"电子邮件\" prop=\"email\" size=\"small\">\r\n                  <el-input v-model=\"registerForm.email\" class=\"register\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"项目\" prop=\"category_id\" size=\"small\">\r\n                  <el-select v-model=\"registerForm.category_id\" placeholder=\"请选择项目\">\r\n                    <el-option\r\n                      v-for=\"item in categorys\"\r\n                      :key=\"item.id\"\r\n                      :label=\"item.name\"\r\n                      :value=\"item.id\">\r\n                    </el-option>\r\n                  </el-select>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click=\"cancelRegisterBtn()\">取 消</el-button>\r\n              <el-button type=\"primary\" @click=\"registerBtn()\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n\r\n        <el-dialog title=\"新建网络拓扑\" :visible.sync=\"topoFormVisible\" width=\"30%\">\r\n          <el-form :model=\"topoForm\" :rules=\"topoRules\" ref=\"topoForm\" label-width=\"100px\">\r\n              <el-form-item label=\"拓扑名称\" prop=\"name\" size=\"small\">\r\n                  <el-input v-model=\"topoForm.name\" class=\"register\" placeholder=\"请输入拓扑名称\"></el-input>\r\n              </el-form-item>\r\n          </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click=\"cancelTopoBtn()\">取 消</el-button>\r\n              <el-button type=\"primary\" @click=\"topoBtn()\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import * as types from '@/store/types'\r\n  export default {\r\n    inject: ['reload'],\r\n    props: ['categorys'],\r\n    data() {\r\n      return {\r\n        topoFormVisible: false,\r\n        dialogFormVisible: false,\r\n        registerFormVisible: false,\r\n        username: null,\r\n        activeIndex: '1',\r\n        links: [],\r\n        topos: [],\r\n        passwordForm: {\r\n          password: '',\r\n          passwordConfirm: ''\r\n        },\r\n        rules: {\r\n          password: [\r\n            { required: true, message: '请输入密码', trigger: 'blur' }\r\n          ],\r\n          passwordConfirm: [\r\n            { required: true, message: '请再次输入密码', trigger: 'blur' }\r\n          ]\r\n        },\r\n        registerForm: {\r\n          username: '',\r\n          name: '',\r\n          password: '',\r\n          passwordConfirm: '',\r\n          email: '',\r\n          category_id: null\r\n        },\r\n        registerRules: {\r\n          username: [\r\n            { required: true, message: '请输入用户登录名称', trigger: 'blur' }\r\n          ],\r\n          name: [\r\n            { required: true, message: '请输入用户姓名', trigger: 'blur' }\r\n          ],\r\n          password: [\r\n            { required: true, message: '请输入密码', trigger: 'blur' }\r\n          ],\r\n          passwordConfirm: [\r\n            { required: true, message: '请再次输入密码', trigger: 'blur' }\r\n          ],\r\n          email: [\r\n            { required: true, message: '请输入用户电子邮件', trigger: 'blur' }\r\n          ],\r\n          category_id: [\r\n            { required: true, message: '请选择项目组', trigger: 'change' }\r\n          ]\r\n        },\r\n        topoForm: {\r\n          name: ''\r\n        },\r\n        topoRules: {\r\n          name: [\r\n            { required: true, message: '请输入环境拓扑图名称', trigger: 'blur' }\r\n          ]\r\n        }\r\n      };\r\n    },\r\n    mounted() {\r\n      this.linkList();\r\n      this.topoList();\r\n      this.getUsername()\r\n    },\r\n    methods: {\r\n      handleSelect(key, keyPath) {\r\n        console.log(key, keyPath);\r\n      },\r\n      initPasswordForm(){\r\n        this.passwordForm.password = null\r\n        this.passwordForm.passwordConfirm = null\r\n      },\r\n      initRegisterForm(){\r\n        this.registerForm.username = null\r\n        this.registerForm.name = null\r\n        this.registerForm.password = null\r\n        this.registerForm.passwordConfirm = null\r\n        this.registerForm.email = null\r\n        this.registerForm.category_id = null\r\n      },\r\n      linkList(){\r\n        this.$axios.get(this.$api.linkList, \r\n        {\r\n          params: {page: 1, size: 100, category_id: 17}\r\n        }).then((response) => {\r\n            this.links = response.data['res']\r\n        })\r\n      },\r\n      topoList(){\r\n        this.$axios.get(this.$api.topoList).then((response) => {\r\n          this.topos = response.data['res']\r\n        })\r\n      },\r\n      getUsername(){\r\n        this.username = localStorage.getItem(\"username\")\r\n      },\r\n      logout(){\r\n        this.$axios.get(this.$api.logoutApi).then((response) => {\r\n          if(this.messageShow(this, response)){\r\n            this.$store.commit(types.LOGOUT);\r\n            this.$router.push('/');\r\n            this.reload()\r\n          }\r\n        })\r\n      },\r\n      changePassword(){\r\n        this.initPasswordForm()\r\n        this.dialogFormVisible = true\r\n      },\r\n      register(){\r\n        this.registerFormVisible = true\r\n      },\r\n      cancelBtn(){\r\n        this.initPasswordForm()\r\n        this.dialogFormVisible = false\r\n      },\r\n      changePasswordBtn(){\r\n        let data = {\r\n          \"username\": this.username,\r\n          \"password\": this.passwordForm.password,\r\n          \"password_confirm\": this.passwordForm.passwordConfirm\r\n        }\r\n        this.$axios.put(this.$api.changePassword, data).then((response) => {\r\n          if (this.messageShow(this, response)){\r\n            this.dialogFormVisible = false;\r\n            this.$router.push({path: '/login'});\r\n          }\r\n        }).catch((error) => {\r\n          this.errorMessageShow(this, error.response);\r\n        })\r\n      },\r\n      cancelRegisterBtn(){\r\n        this.initRegisterForm()\r\n        this.registerFormVisible = false\r\n      },\r\n      registerBtn(){\r\n        let data = {\r\n          \"username\": this.registerForm.username,\r\n          \"name\": this.registerForm.name,\r\n          \"password\": this.registerForm.password,\r\n          \"password_confirm\": this.registerForm.passwordConfirm,\r\n          \"email\": this.registerForm.email,\r\n          \"category_id\": this.registerForm.category_id\r\n        }\r\n        this.$axios.post(this.$api.userManage, data).then(response => {\r\n          if (this.messageShow(this, response)){\r\n            this.registerFormVisible = false;\r\n          }\r\n        }).catch((error) => {\r\n          this.errorMessageShow(this, error.response);\r\n        })\r\n      },\r\n      newTopo(){\r\n        this.topoFormVisible = true\r\n      },\r\n      cancelTopoBtn(){\r\n        this.topoForm.name = null\r\n        this.topoFormVisible = false\r\n      },\r\n      topoBtn(){\r\n        let data = {\r\n          \"name\": this.topoForm.name\r\n        }\r\n        this.$axios.post(this.$api.topoList, data).then(response => {\r\n          if (this.messageShow(this, response)){\r\n            this.topoFormVisible = false;\r\n            var url = '#/topo/' + response.data['res']['id']\r\n            window.open(url, '_blank')\r\n          }\r\n        }).catch((error) => {\r\n          this.errorMessageShow(this, error.response);\r\n        })\r\n      }\r\n    }\r\n  }\r\n</script>"]}]}