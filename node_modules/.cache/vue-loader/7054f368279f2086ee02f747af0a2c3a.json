{"remainingRequest":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workFiles\\deployweb\\src\\components\\qr\\QuestionEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workFiles\\deployweb\\src\\components\\qr\\QuestionEdit.vue","mtime":1583747397542},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport '@ckeditor/ckeditor5-build-decoupled-document/build/translations/zh-cn'\r\nimport DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document'\r\n// import func from '../../../vue-temp/vue-editor-bridge';\r\n\r\n  export default {\r\n    props: ['categorys'],\r\n    inject: ['reload'],\r\n    data() {\r\n      return {\r\n        editor: DecoupledEditor,\r\n        editorConfig: {\r\n            language: 'zh-cn',\r\n            fontSize: {\r\n                options: [8, 10, 'default', 14, 16, 18, 20, 22, 24, 26, 28, 32, 48]\r\n            },\r\n            fontFamily:{\r\n                options: ['宋体', '仿宋', '微软雅黑', '黑体', '仿宋_GB2312', '楷体', '隶书', '幼圆']\r\n            }\r\n        },\r\n        users: [],\r\n        questionEditFlag: false,\r\n        questionEditId: '',\r\n        subHeader: '',\r\n        loading: false,\r\n        p_classes: [\r\n          {key: 'P1', value: 'P1'},\r\n          {key: 'P2', value: 'P2'},\r\n          {key: 'P3', value: 'P3'},\r\n          {key: 'P4', value: 'P4'}\r\n        ],\r\n        record_types: [\r\n          {key: '故障', value: '故障'},\r\n          {key: '环境问题', value: '环境问题'},\r\n          {key: '脚本问题', value: '脚本问题'},\r\n          {key: '版本问题', value: '版本问题'},\r\n          {key: '测试数据有误', value: '测试数据有误'},\r\n          {key: '其它', value: '其它'}\r\n        ],\r\n        questionForm: {\r\n          title: '',\r\n          category_id: '',\r\n          questioner: '',\r\n          p_class: '',\r\n          resolver: '',\r\n          body: '',\r\n          record_type: ''\r\n        },\r\n        rules: {\r\n          title: [\r\n            { required: true, message: '请输入计划标题', trigger: 'blur' },\r\n            { min: 3, max: 60, message: '长度在 3 到 60 个字符', trigger: 'blur' }\r\n          ],\r\n          category_id: [\r\n            { required: true, message: '请选择所属项目', trigger: 'change' }\r\n          ],\r\n          p_class: [\r\n            { required: true, message: '请选择问题级别', trigger: 'blur' }\r\n          ],\r\n          resolver: [\r\n            { required: true, message: '请输入问题指派人', trigger: 'blur' }\r\n          ],\r\n          body: [\r\n            { required: true, message: '请填写问题详细内容', trigger: 'blur' }\r\n          ],\r\n          record_type: [\r\n            { required: true, message: '请选择问题类型', trigger: 'blur' }\r\n          ]\r\n        }\r\n      };\r\n    },\r\n    mounted() {\r\n      this.judgeCreateOrEdit();\r\n      this.getAllUsers();\r\n    },\r\n    methods: {\r\n        initQuestionFormEdit(id){\r\n          this.$axios.get((this.$api.questionManage + '/' + id)).then((response) => {\r\n            this.questionForm.title = response.data['res']['title']\r\n            this.questionForm.category_id = response.data['res']['category_id']\r\n            this.questionForm.p_class = response.data['res']['p_class']\r\n            this.questionForm.questioner = response.data['res']['questioner']\r\n            this.questionForm.resolver = response.data['res']['resolver']\r\n            this.questionForm.body = response.data['res']['body']\r\n            this.questionForm.record_type = response.data['res']['record_type']\r\n          })\r\n        },\r\n        judgeCreateOrEdit(){\r\n            if(this.$route.path.indexOf('edit') >= 0){\r\n                this.questionEditFlag = true\r\n                this.subHeader = '编辑问题'\r\n                this.questionEditId = this.$route.params.id\r\n                this.initQuestionFormEdit(this.questionEditId)\r\n            }else{\r\n                this.questionEditFlag = false\r\n                this.subHeader = '新建问题'\r\n                this.questionForm.questioner = localStorage.getItem(\"name\")\r\n            }\r\n        },\r\n        goBack(){\r\n            this.$router.go(-1);\r\n        },\r\n        editorOnReady(editor){\r\n            editor.ui.getEditableElement().parentElement.insertBefore(\r\n                editor.ui.view.toolbar.element,\r\n                editor.ui.getEditableElement()\r\n            );\r\n            editor.plugins.get('FileRepository').createUploadAdapter = function(loader){\r\n                let val = editor.getData();\r\n                return{\r\n                    upload: async function(){\r\n                        return await loader.file.then(f => {\r\n                            const F = new FileReader();\r\n                            F.readAsArrayBuffer(f);\r\n                            return new Promise(resolve => {\r\n                                F.onload = function(){\r\n                                    resolve(F.result)\r\n                                };\r\n                            })\r\n                        }).then(bufAsArray => {\r\n                            return{\r\n                                default: ''\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        },\r\n      submitForm(formName) {\r\n        this.loading = true\r\n        this.$refs[formName].validate((valid) => {\r\n          if (valid) {\r\n            let data = {\r\n              \"title\": this.questionForm.title,\r\n              \"category_id\": this.questionForm.category_id,\r\n              \"p_class\": this.questionForm.p_class,\r\n              \"questioner\": this.questionForm.questioner,\r\n              \"resolver\": this.questionForm.resolver,\r\n              \"body\": this.questionForm.body,\r\n              \"record_type\": this.questionForm.record_type\r\n            }\r\n            if (this.questionEditFlag === false){\r\n              this.$axios.post(this.$api.questionManage, data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.loading = false\r\n                  this.$router.push('/q_r/questions')\r\n                  this.reload();\r\n                }\r\n              }).catch((error) => {\r\n                this.errorMessageShow(this, error.response);\r\n              })\r\n            }else{\r\n              this.$axios.put((this.$api.questionManage + '/' + this.questionEditId), data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.loading = false\r\n                  this.$router.push('/q_r/questions')\r\n                  this.reload();\r\n                }\r\n              }).catch((error) => {\r\n                this.errorMessageShow(this, error.response);\r\n              })\r\n            }\r\n          } else {\r\n            console.log('error submit!!');\r\n            return false;\r\n          }\r\n        });\r\n      },\r\n      resetForm(formName) {\r\n        this.$refs[formName].resetFields();\r\n      },\r\n      querySearch(queryString, cb) {\r\n        var users = this.users;\r\n        var results = queryString ? users.filter(this.createFilter(queryString)) : users;\r\n        cb(results);\r\n      },\r\n      createFilter(queryString) {\r\n        return (user) => {\r\n          return (user.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\r\n        };\r\n      },\r\n      getAllUsers(){\r\n        this.$axios.get(this.$api.userList, \r\n        {\r\n          params: {page: 1, size: 100}\r\n        }).then((response) => {\r\n          this.users = response.data['res']\r\n        })\r\n      }\r\n    }\r\n  }\r\n",{"version":3,"sources":["QuestionEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"QuestionEdit.vue","sourceRoot":"src/components/qr","sourcesContent":["<template>\r\n<div>\r\n    <el-page-header @back=\"goBack\" v-bind:content=\"subHeader\"></el-page-header>\r\n    <el-divider></el-divider>\r\n    <el-form :model=\"questionForm\" :rules=\"rules\" ref=\"questionForm\" label-width=\"150px\" class=\"demo-questionForm\" label-position=\"top\">\r\n        <el-form-item label=\"问题标题\" prop=\"title\" size=\"small\">\r\n            <el-input v-model=\"questionForm.title\" class=\"commonwidth\"></el-input>\r\n        </el-form-item>\r\n        <el-row :gutter=\"10\">\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"提出者\" prop=\"questioner\" size=\"small\">\r\n                <el-input v-model=\"questionForm.questioner\" :disabled=\"true\"></el-input>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"项目\" prop=\"category_id\" size=\"small\">\r\n                <el-select v-model=\"questionForm.category_id\" placeholder=\"请选择项目\">\r\n                  <el-option\r\n                    v-for=\"item in categorys\"\r\n                    :key=\"item.id\"\r\n                    :label=\"item.name\"\r\n                    :value=\"item.id\">\r\n                  </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"级别\" prop=\"p_class\" size=\"small\">\r\n                <el-select v-model=\"questionForm.p_class\" placeholder=\"请选择问题级别\">\r\n                  <el-option\r\n                    v-for=\"item in p_classes\"\r\n                    :key=\"item.key\"\r\n                    :label=\"item.key\"\r\n                    :value=\"item.value\">\r\n                  </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"问题类型\" prop=\"record_type\" size=\"small\">\r\n                <el-select v-model=\"questionForm.record_type\" placeholder=\"请选择问题类型\">\r\n                  <el-option\r\n                    v-for=\"item in record_types\"\r\n                    :key=\"item.key\"\r\n                    :label=\"item.key\"\r\n                    :value=\"item.value\">\r\n                  </el-option>\r\n                </el-select>\r\n            </el-form-item>\r\n          </el-col>\r\n          <el-col :span=\"4\">\r\n            <el-form-item label=\"指派\" prop=\"resolver\" size=\"small\">\r\n                <!-- <el-input v-model=\"questionForm.resolver\"></el-input> -->\r\n                <el-autocomplete\r\n                  class=\"inline-input\"\r\n                  v-model=\"questionForm.resolver\"\r\n                  :fetch-suggestions=\"querySearch\"\r\n                  placeholder=\"请输入指派人员\"\r\n                  :trigger-on-focus=\"true\"\r\n                  >\r\n                </el-autocomplete>\r\n            </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n        <el-form-item label=\"详细内容\" prop=\"body\" size=\"small\">\r\n        <div  class=\"deploytext\">\r\n        <ckeditor :editor=\"editor\" @ready=\"editorOnReady\" v-model=\"questionForm.body\" :config=\"editorConfig\">\r\n        </ckeditor>\r\n        <el-divider></el-divider>\r\n        </div>\r\n        </el-form-item>\r\n        <el-form-item>\r\n            <el-button type=\"primary\" @click=\"submitForm('questionForm')\" :loading=\"loading\">{{ loading ? '提交中 ...' : '确 定' }}</el-button>\r\n            <el-button @click=\"resetForm('questionForm')\">重 置</el-button>\r\n        </el-form-item>\r\n    </el-form>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport '@ckeditor/ckeditor5-build-decoupled-document/build/translations/zh-cn'\r\nimport DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document'\r\n// import func from '../../../vue-temp/vue-editor-bridge';\r\n\r\n  export default {\r\n    props: ['categorys'],\r\n    inject: ['reload'],\r\n    data() {\r\n      return {\r\n        editor: DecoupledEditor,\r\n        editorConfig: {\r\n            language: 'zh-cn',\r\n            fontSize: {\r\n                options: [8, 10, 'default', 14, 16, 18, 20, 22, 24, 26, 28, 32, 48]\r\n            },\r\n            fontFamily:{\r\n                options: ['宋体', '仿宋', '微软雅黑', '黑体', '仿宋_GB2312', '楷体', '隶书', '幼圆']\r\n            }\r\n        },\r\n        users: [],\r\n        questionEditFlag: false,\r\n        questionEditId: '',\r\n        subHeader: '',\r\n        loading: false,\r\n        p_classes: [\r\n          {key: 'P1', value: 'P1'},\r\n          {key: 'P2', value: 'P2'},\r\n          {key: 'P3', value: 'P3'},\r\n          {key: 'P4', value: 'P4'}\r\n        ],\r\n        record_types: [\r\n          {key: '故障', value: '故障'},\r\n          {key: '环境问题', value: '环境问题'},\r\n          {key: '脚本问题', value: '脚本问题'},\r\n          {key: '版本问题', value: '版本问题'},\r\n          {key: '测试数据有误', value: '测试数据有误'},\r\n          {key: '其它', value: '其它'}\r\n        ],\r\n        questionForm: {\r\n          title: '',\r\n          category_id: '',\r\n          questioner: '',\r\n          p_class: '',\r\n          resolver: '',\r\n          body: '',\r\n          record_type: ''\r\n        },\r\n        rules: {\r\n          title: [\r\n            { required: true, message: '请输入计划标题', trigger: 'blur' },\r\n            { min: 3, max: 60, message: '长度在 3 到 60 个字符', trigger: 'blur' }\r\n          ],\r\n          category_id: [\r\n            { required: true, message: '请选择所属项目', trigger: 'change' }\r\n          ],\r\n          p_class: [\r\n            { required: true, message: '请选择问题级别', trigger: 'blur' }\r\n          ],\r\n          resolver: [\r\n            { required: true, message: '请输入问题指派人', trigger: 'blur' }\r\n          ],\r\n          body: [\r\n            { required: true, message: '请填写问题详细内容', trigger: 'blur' }\r\n          ],\r\n          record_type: [\r\n            { required: true, message: '请选择问题类型', trigger: 'blur' }\r\n          ]\r\n        }\r\n      };\r\n    },\r\n    mounted() {\r\n      this.judgeCreateOrEdit();\r\n      this.getAllUsers();\r\n    },\r\n    methods: {\r\n        initQuestionFormEdit(id){\r\n          this.$axios.get((this.$api.questionManage + '/' + id)).then((response) => {\r\n            this.questionForm.title = response.data['res']['title']\r\n            this.questionForm.category_id = response.data['res']['category_id']\r\n            this.questionForm.p_class = response.data['res']['p_class']\r\n            this.questionForm.questioner = response.data['res']['questioner']\r\n            this.questionForm.resolver = response.data['res']['resolver']\r\n            this.questionForm.body = response.data['res']['body']\r\n            this.questionForm.record_type = response.data['res']['record_type']\r\n          })\r\n        },\r\n        judgeCreateOrEdit(){\r\n            if(this.$route.path.indexOf('edit') >= 0){\r\n                this.questionEditFlag = true\r\n                this.subHeader = '编辑问题'\r\n                this.questionEditId = this.$route.params.id\r\n                this.initQuestionFormEdit(this.questionEditId)\r\n            }else{\r\n                this.questionEditFlag = false\r\n                this.subHeader = '新建问题'\r\n                this.questionForm.questioner = localStorage.getItem(\"name\")\r\n            }\r\n        },\r\n        goBack(){\r\n            this.$router.go(-1);\r\n        },\r\n        editorOnReady(editor){\r\n            editor.ui.getEditableElement().parentElement.insertBefore(\r\n                editor.ui.view.toolbar.element,\r\n                editor.ui.getEditableElement()\r\n            );\r\n            editor.plugins.get('FileRepository').createUploadAdapter = function(loader){\r\n                let val = editor.getData();\r\n                return{\r\n                    upload: async function(){\r\n                        return await loader.file.then(f => {\r\n                            const F = new FileReader();\r\n                            F.readAsArrayBuffer(f);\r\n                            return new Promise(resolve => {\r\n                                F.onload = function(){\r\n                                    resolve(F.result)\r\n                                };\r\n                            })\r\n                        }).then(bufAsArray => {\r\n                            return{\r\n                                default: ''\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        },\r\n      submitForm(formName) {\r\n        this.loading = true\r\n        this.$refs[formName].validate((valid) => {\r\n          if (valid) {\r\n            let data = {\r\n              \"title\": this.questionForm.title,\r\n              \"category_id\": this.questionForm.category_id,\r\n              \"p_class\": this.questionForm.p_class,\r\n              \"questioner\": this.questionForm.questioner,\r\n              \"resolver\": this.questionForm.resolver,\r\n              \"body\": this.questionForm.body,\r\n              \"record_type\": this.questionForm.record_type\r\n            }\r\n            if (this.questionEditFlag === false){\r\n              this.$axios.post(this.$api.questionManage, data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.loading = false\r\n                  this.$router.push('/q_r/questions')\r\n                  this.reload();\r\n                }\r\n              }).catch((error) => {\r\n                this.errorMessageShow(this, error.response);\r\n              })\r\n            }else{\r\n              this.$axios.put((this.$api.questionManage + '/' + this.questionEditId), data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.loading = false\r\n                  this.$router.push('/q_r/questions')\r\n                  this.reload();\r\n                }\r\n              }).catch((error) => {\r\n                this.errorMessageShow(this, error.response);\r\n              })\r\n            }\r\n          } else {\r\n            console.log('error submit!!');\r\n            return false;\r\n          }\r\n        });\r\n      },\r\n      resetForm(formName) {\r\n        this.$refs[formName].resetFields();\r\n      },\r\n      querySearch(queryString, cb) {\r\n        var users = this.users;\r\n        var results = queryString ? users.filter(this.createFilter(queryString)) : users;\r\n        cb(results);\r\n      },\r\n      createFilter(queryString) {\r\n        return (user) => {\r\n          return (user.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\r\n        };\r\n      },\r\n      getAllUsers(){\r\n        this.$axios.get(this.$api.userList, \r\n        {\r\n          params: {page: 1, size: 100}\r\n        }).then((response) => {\r\n          this.users = response.data['res']\r\n        })\r\n      }\r\n    }\r\n  }\r\n</script>"]}]}