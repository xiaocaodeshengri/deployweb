{"remainingRequest":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workFiles\\deployweb\\src\\components\\qr\\QuestionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workFiles\\deployweb\\src\\components\\qr\\QuestionDetail.vue","mtime":1583747397541},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workFiles\\deployweb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport '@ckeditor/ckeditor5-build-decoupled-document/build/translations/zh-cn'\r\nimport DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document'\r\n\r\nexport default {\r\n    inject: ['reload'],\r\n    data(){\r\n        return{\r\n            editor: DecoupledEditor,\r\n            editorConfig: {\r\n                language: 'zh-cn',\r\n                fontSize: {\r\n                    options: [8, 10, 'default', 14, 16, 18, 20, 22, 24, 26, 28, 32, 48]\r\n                },\r\n                fontFamily:{\r\n                    options: ['宋体', '仿宋', '微软雅黑', '黑体', '仿宋_GB2312', '楷体', '隶书', '幼圆']\r\n                }\r\n            },\r\n            dialogFormVisible: false,\r\n            remarkFormVisible: false,\r\n            question: {\r\n                title: \"\",\r\n                category: \"\",\r\n                p_class: \"\",\r\n                questioner: \"\",\r\n                record_type: \"\",\r\n                resolver: \"\",\r\n                status: \"\",\r\n                create_time: null,\r\n                update_time: null,\r\n                resolve_time: null,\r\n                body: \"\",\r\n                answer: \"\",\r\n                question_histories: []\r\n            },\r\n            answerForm: {\r\n                answer: ''\r\n            },\r\n            rules: {\r\n                answer: [\r\n                    { required: true, message: '请解决该问题', trigger: 'blur' },\r\n                ],\r\n                remark: [\r\n                    { required: true, message: '请输入问题备注', trigger: 'blur' },\r\n                ]\r\n            },\r\n            remarkForm: {\r\n                remark: ''\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        this.initQuestionDetail()\r\n    },\r\n    methods: {\r\n        editorOnReady(editor){\r\n            editor.ui.getEditableElement().parentElement.insertBefore(\r\n                editor.ui.view.toolbar.element,\r\n                editor.ui.getEditableElement()\r\n            );\r\n            editor.plugins.get('FileRepository').createUploadAdapter = function(loader){\r\n                let val = editor.getData();\r\n                return{\r\n                    upload: async function(){\r\n                        return await loader.file.then(f => {\r\n                            const F = new FileReader();\r\n                            F.readAsArrayBuffer(f);\r\n                            return new Promise(resolve => {\r\n                                F.onload = function(){\r\n                                    resolve(F.result)\r\n                                };\r\n                            })\r\n                        }).then(bufAsArray => {\r\n                            return{\r\n                                default: ''\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        }, \r\n        initQuestionDetail(){\r\n            let id = this.$route.params.id\r\n            this.$axios.get((this.$api.questionManage + '/' + id)).then((response) => {\r\n                this.question.title = response.data['res']['title']\r\n                this.question.category = response.data['res']['category']\r\n                this.question.p_class = response.data['res']['p_class']\r\n                this.question.questioner = response.data['res']['questioner']\r\n                this.question.record_type = response.data['res']['record_type']\r\n                this.question.resolver = response.data['res']['resolver']\r\n                this.question.status = response.data['res']['status']\r\n                this.question.create_time = response.data['res']['create_time']\r\n                this.question.update_time = response.data['res']['update_time']\r\n                this.question.resolve_time = response.data['res']['resolve_time']\r\n                this.question.body = response.data['res']['body']\r\n                this.question.answer = response.data['res']['answer']\r\n                this.question.question_histories = response.data['res']['question_histories']\r\n            })\r\n        },\r\n        goBack(){\r\n            this.$router.go(-1);\r\n        },\r\n        answerQuestion(){\r\n            this.answerForm.answer = this.question.answer\r\n            this.dialogFormVisible = true\r\n        },\r\n        cancelBtn(){\r\n            this.dialogFormVisible = false\r\n            this.remarkFormVisible = false\r\n            this.reload()\r\n        },\r\n        answerBtn(){\r\n            let id = this.$route.params.id\r\n            let data = {\r\n                'answer': this.answerForm.answer\r\n            }\r\n            this.$axios.put((this.$api.questionManage + '/' + id), data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.reload();}\r\n                }).catch((error) => {\r\n                    this.errorMessageShow(this, error.response);\r\n                })\r\n        },\r\n        addRemark(){\r\n            this.remarkForm.answer = ''\r\n            this.remarkFormVisible = true\r\n        },\r\n        addRemarkBtn(){\r\n            let id = this.$route.params.id\r\n            let data = {\r\n                'remark': this.remarkForm.remark\r\n            }\r\n            this.$axios.put((this.$api.questionManage + '/' + id), data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.reload();}\r\n                }).catch((error) => {\r\n                    this.errorMessageShow(this, error.response);\r\n                })\r\n        }\r\n    }\r\n}\r\n",{"version":3,"sources":["QuestionDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"QuestionDetail.vue","sourceRoot":"src/components/qr","sourcesContent":["<template>\r\n    <div>\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"21\">\r\n                <el-page-header @back=\"goBack\" :content=\"question.title\"></el-page-header>\r\n            </el-col>\r\n            <!-- <el-col :span=\"3\" :offset=\"3\">\r\n                <el-button @click=\"answerQuestion\" type=\"primary\" size=\"small\" plain>Answer</el-button>\r\n            </el-col> -->\r\n            <el-col :span=\"1\" style=padding-top:0px>\r\n                <el-dropdown>\r\n                <span split-button class=\"el-dropdown-link icon-warp\">\r\n                    <i class=\"el-icon-circle-plus\"></i>\r\n                </span>\r\n                <el-dropdown-menu slot=\"dropdown\">\r\n                    <el-dropdown-item @click.native=\"answerQuestion\">解答问题</el-dropdown-item>\r\n                    <el-dropdown-item @click.native=\"addRemark\">添加备注</el-dropdown-item>\r\n                </el-dropdown-menu>\r\n                </el-dropdown>\r\n            </el-col>\r\n        </el-row>\r\n        <el-divider></el-divider>\r\n        <div>\r\n            <div class=\"mdui-typo\">\r\n                <ul>\r\n                <li>项目: {{ question.category }}</li>\r\n                <li>级别: {{ question.p_class }}</li>\r\n                <li>问题类型: {{ question.record_type }}</li>\r\n                <li>发起者: {{ question.questioner }}</li>\r\n                <li>指派: {{ question.resolver }}</li>\r\n                <li>状态: {{ question.status }}</li>\r\n                <li>创建时间: {{ question.create_time }}</li>\r\n                </ul>\r\n                <el-divider content-position=\"left\"><strong>详细内容</strong></el-divider>\r\n                <span v-html=\"question.body\"></span>\r\n                <div v-show=\"question.answer\">\r\n                    <el-divider content-position=\"left\"><strong>解决情况</strong></el-divider>\r\n                    <span v-html=\"question.answer\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <el-divider content-position=\"left\"><strong>历史记录</strong></el-divider>\r\n        <el-table\r\n            :data=\"question.question_histories\"\r\n            stripe\r\n            style=\"width: 100%\">\r\n            <el-table-column\r\n            prop=\"timestamp\"\r\n            label=\"时间\"\r\n            width=\"230\">\r\n            </el-table-column>\r\n            <el-table-column\r\n            prop=\"user\"\r\n            label=\"\"\r\n            width=\"150\">\r\n            </el-table-column>\r\n            <el-table-column\r\n            prop=\"record\"\r\n            label=\"记录\"\r\n            min-width=\"100\">\r\n            </el-table-column>\r\n        </el-table>\r\n\r\n        <el-dialog title=\"问题解答\" :visible.sync=\"dialogFormVisible\">\r\n          <el-form :model=\"answerForm\" :rules=\"rules\" ref=\"answerForm\" label-width=\"100px\" class=\"demo-answerForm\" label-position=\"top\">\r\n              <el-form-item prop=\"answer\" size=\"small\">\r\n                <div>\r\n                <ckeditor :editor=\"editor\" @ready=\"editorOnReady\" v-model=\"answerForm.answer\" :config=\"editorConfig\">\r\n                </ckeditor>\r\n                <el-divider></el-divider>\r\n                </div>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click=\"cancelBtn()\">取 消</el-button>\r\n              <el-button type=\"primary\" @click=\"answerBtn()\">确 认</el-button>\r\n            </div>\r\n        </el-dialog>\r\n\r\n        <el-dialog title=\"备注\" :visible.sync=\"remarkFormVisible\">\r\n          <el-form :model=\"remarkForm\" :rules=\"rules\" ref=\"remarkForm\" label-width=\"100px\" class=\"demo-answerForm\" label-position=\"top\">\r\n              <el-form-item prop=\"remark\" size=\"small\" label=\"备注\">\r\n                <el-input type=\"textarea\" v-model=\"remarkForm.remark\"></el-input>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click=\"cancelBtn()\">取 消</el-button>\r\n              <el-button type=\"primary\" @click=\"addRemarkBtn()\">确 认</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport '@ckeditor/ckeditor5-build-decoupled-document/build/translations/zh-cn'\r\nimport DecoupledEditor from '@ckeditor/ckeditor5-build-decoupled-document'\r\n\r\nexport default {\r\n    inject: ['reload'],\r\n    data(){\r\n        return{\r\n            editor: DecoupledEditor,\r\n            editorConfig: {\r\n                language: 'zh-cn',\r\n                fontSize: {\r\n                    options: [8, 10, 'default', 14, 16, 18, 20, 22, 24, 26, 28, 32, 48]\r\n                },\r\n                fontFamily:{\r\n                    options: ['宋体', '仿宋', '微软雅黑', '黑体', '仿宋_GB2312', '楷体', '隶书', '幼圆']\r\n                }\r\n            },\r\n            dialogFormVisible: false,\r\n            remarkFormVisible: false,\r\n            question: {\r\n                title: \"\",\r\n                category: \"\",\r\n                p_class: \"\",\r\n                questioner: \"\",\r\n                record_type: \"\",\r\n                resolver: \"\",\r\n                status: \"\",\r\n                create_time: null,\r\n                update_time: null,\r\n                resolve_time: null,\r\n                body: \"\",\r\n                answer: \"\",\r\n                question_histories: []\r\n            },\r\n            answerForm: {\r\n                answer: ''\r\n            },\r\n            rules: {\r\n                answer: [\r\n                    { required: true, message: '请解决该问题', trigger: 'blur' },\r\n                ],\r\n                remark: [\r\n                    { required: true, message: '请输入问题备注', trigger: 'blur' },\r\n                ]\r\n            },\r\n            remarkForm: {\r\n                remark: ''\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        this.initQuestionDetail()\r\n    },\r\n    methods: {\r\n        editorOnReady(editor){\r\n            editor.ui.getEditableElement().parentElement.insertBefore(\r\n                editor.ui.view.toolbar.element,\r\n                editor.ui.getEditableElement()\r\n            );\r\n            editor.plugins.get('FileRepository').createUploadAdapter = function(loader){\r\n                let val = editor.getData();\r\n                return{\r\n                    upload: async function(){\r\n                        return await loader.file.then(f => {\r\n                            const F = new FileReader();\r\n                            F.readAsArrayBuffer(f);\r\n                            return new Promise(resolve => {\r\n                                F.onload = function(){\r\n                                    resolve(F.result)\r\n                                };\r\n                            })\r\n                        }).then(bufAsArray => {\r\n                            return{\r\n                                default: ''\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        }, \r\n        initQuestionDetail(){\r\n            let id = this.$route.params.id\r\n            this.$axios.get((this.$api.questionManage + '/' + id)).then((response) => {\r\n                this.question.title = response.data['res']['title']\r\n                this.question.category = response.data['res']['category']\r\n                this.question.p_class = response.data['res']['p_class']\r\n                this.question.questioner = response.data['res']['questioner']\r\n                this.question.record_type = response.data['res']['record_type']\r\n                this.question.resolver = response.data['res']['resolver']\r\n                this.question.status = response.data['res']['status']\r\n                this.question.create_time = response.data['res']['create_time']\r\n                this.question.update_time = response.data['res']['update_time']\r\n                this.question.resolve_time = response.data['res']['resolve_time']\r\n                this.question.body = response.data['res']['body']\r\n                this.question.answer = response.data['res']['answer']\r\n                this.question.question_histories = response.data['res']['question_histories']\r\n            })\r\n        },\r\n        goBack(){\r\n            this.$router.go(-1);\r\n        },\r\n        answerQuestion(){\r\n            this.answerForm.answer = this.question.answer\r\n            this.dialogFormVisible = true\r\n        },\r\n        cancelBtn(){\r\n            this.dialogFormVisible = false\r\n            this.remarkFormVisible = false\r\n            this.reload()\r\n        },\r\n        answerBtn(){\r\n            let id = this.$route.params.id\r\n            let data = {\r\n                'answer': this.answerForm.answer\r\n            }\r\n            this.$axios.put((this.$api.questionManage + '/' + id), data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.reload();}\r\n                }).catch((error) => {\r\n                    this.errorMessageShow(this, error.response);\r\n                })\r\n        },\r\n        addRemark(){\r\n            this.remarkForm.answer = ''\r\n            this.remarkFormVisible = true\r\n        },\r\n        addRemarkBtn(){\r\n            let id = this.$route.params.id\r\n            let data = {\r\n                'remark': this.remarkForm.remark\r\n            }\r\n            this.$axios.put((this.$api.questionManage + '/' + id), data).then((response) => {\r\n                if (this.messageShow(this, response)){\r\n                  this.reload();}\r\n                }).catch((error) => {\r\n                    this.errorMessageShow(this, error.response);\r\n                })\r\n        }\r\n    }\r\n}\r\n</script>"]}]}